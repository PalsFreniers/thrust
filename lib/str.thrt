fn cstrlen
        0 <> during dup ,8 0 != go
                1 + <>
                1 + <>
        end _
end

define cstr-to-str
        dup cstrlen <>
end

fn cstreq
        during
                if <+> ,8 0 != <+> ,8 0 != & @bool go 
                        <+> ,8 <+> ,8 =
                else
                        false
                end
        go 1 + <> 1 + end
        ,8 0 = <>
        ,8 0 = & @bool
end

const sizeof(str) 16 end
define str.count 0 + end
define str.data 8 + end

define str.read()
        dup str.count ,64 <>
        str.data ,64 @ptr
end

define str.read(data)
        str.data ,64 @ptr
end

define str.read(count)
        str.count ,64
end

define str.write()
        <-> dup <-> <>
        str.data .64
        str.count .64
end

define str.write(data)
        <> str.data .64
end

define str.write(count)
        <> str.count .64
end

define str.copy()
        str.read() str.write()
end

define str.fromCstr()
        dup cstrlen <> str.write()
end

define str.empty()
        str.read(count) 0 =
end

define str.shl()
        dup str.count --64
        str.data ++64
end

fn str.chopDelim()
        <--> dup2 str.read(data) str.write(data)
        <+> 0 str.write(count)
        <->
        during
                if <+> str.empty() ! go
                        <+> str.read(data) ,8 <+> !=
                else
                        false
                end
        go
        <+> str.shl()
        <-> dup str.count ++64
        <-->
        end _
        if dup str.empty() ! go
                dup str.shl()
        end __
end

fn str.trimLeft()
        during
                if <+> str.empty() ! go
                        <+> str.read(data) ,8 <+> =
                else
                        false
                end
        go
                <+> str.shl()
        end __
end

alloc str.equals[a] 16 end
alloc str.equals[b] 16 end

fn str.equals()
        str.equals[a] <--> str.write()
        str.equals[b] <--> str.write()
        if
                str.equals[a] str.read(count)
                str.equals[b] str.read(count) =
        go
                0 during
                        if dup str.equals[a] str.read(count) < go
                                dup str.equals[a] str.read(data) + ,8
                                <+> str.equals[b] str.read(data) + ,8
                                =
                        else false end
                go
                        ++
                end
                str.equals[a] str.read(count) =
        else false end
end
