addin "std"

const KEYWORD_IF       1 offset end
const KEYWORD_ELIF     1 offset end
const KEYWORD_ELSE     1 offset end
const KEYWORD_END      1 offset end
const KEYWORD_WHILE    1 offset end
const KEYWORD_DO       1 offset end
const KEYWORD_MACRO    1 offset end
const KEYWORD_INCLUDE  1 offset end
const KEYWORD_MEMORY   1 offset end
const KEYWORD_FUNCTION 1 offset end
const KEYWORD_CONST    1 offset end
const KEYWORD_OFFSET   1 offset end
const KEYWORD_RESET    1 offset end
const KEYWORD_ASSERT   1 offset end
const KEYWORD_TRUE     1 offset end
const KEYWORD_FALSE    1 offset end
const KEYWORD_NULL     1 offset end
const KEYWORD_COUNT       reset  end
const sizeof(Keyword) sizeof(u8) end
assert "Exhaustive handling of keyword" KEYWORD_COUNT 17 = end

const DATATYPE_BOOL  1 offset end
const DATATYPE_INT   1 offset end
const DATATYPE_PTR   1 offset end
const DATATYPE_COUNT   reset  end
const sizeof(DataType) sizeof(u8) end
assert "Exhaustive handling of datatype" DATATYPE_COUNT 3 = end

const INTRINSIC_PLUS      1 offset end
const INTRINSIC_MINUS     1 offset end
const INTRINSIC_MUL       1 offset end
const INTRINSIC_DIV       1 offset end
const INTRINSIC_MOD       1 offset end
const INTRINSIC_DUP       1 offset end
const INTRINSIC_SWAP      1 offset end
const INTRINSIC_SWAP2     1 offset end
const INTRINSIC_OVER      1 offset end
const INTRINSIC_ROT       1 offset end
const INTRINSIC_PRINT     1 offset end
const INTRINSIC_EQ        1 offset end
const INTRINSIC_GT        1 offset end
const INTRINSIC_LT        1 offset end
const INTRINSIC_GE        1 offset end
const INTRINSIC_LE        1 offset end
const INTRINSIC_NE        1 offset end
const INTRINSIC_INV       1 offset end
const INTRINSIC_DROP      1 offset end
const INTRINSIC_LOAD      1 offset end
const INTRINSIC_LOAD16    1 offset end
const INTRINSIC_LOAD32    1 offset end
const INTRINSIC_LOAD64    1 offset end
const INTRINSIC_STORE     1 offset end
const INTRINSIC_STORE16   1 offset end
const INTRINSIC_STORE32   1 offset end
const INTRINSIC_STORE64   1 offset end
const INTRINSIC_SYSCALL0  1 offset end
const INTRINSIC_SYSCALL1  1 offset end
const INTRINSIC_SYSCALL2  1 offset end
const INTRINSIC_SYSCALL3  1 offset end
const INTRINSIC_SYSCALL4  1 offset end
const INTRINSIC_SYSCALL5  1 offset end
const INTRINSIC_SYSCALL6  1 offset end
const INTRINSIC_ARGC      1 offset end
const INTRINSIC_ARGV      1 offset end
const INTRINSIC_SHR       1 offset end
const INTRINSIC_SHL       1 offset end
const INTRINSIC_AND       1 offset end
const INTRINSIC_OR        1 offset end
const INTRINSIC_NOT       1 offset end
const INTRINSIC_XOR       1 offset end
const INTRINSIC_HERE      1 offset end
const INTRINSIC_CAST_PTR  1 offset end
const INTRINSIC_CAST_INT  1 offset end
const INTRINSIC_CAST_BOOL 1 offset end
const INTRINSIC_COUNT       reset  end
const sizeof(Intrinsic) sizeof(u8) end
assert "Exhaustive handling of intrinsics" INTRINSIC_COUNT 46 = end

const OPTYPE_PUSH_BOOL      1 offset end
const OPTYPE_PUSH_PTR       1 offset end
const OPTYPE_PUSH_INT       1 offset end
const OPTYPE_PUSH_STR       1 offset end
const OPTYPE_PUSH_CSTR      1 offset end
const OPTYPE_PUSH_MEM       1 offset end
const OPTYPE_PUSH_LOCAL_MEM 1 offset end
const OPTYPE_INTRINSIC      1 offset end
const OPTYPE_IF             1 offset end
const OPTYPE_ELIF           1 offset end
const OPTYPE_ELSE           1 offset end
const OPTYPE_END            1 offset end
const OPTYPE_WHILE          1 offset end
const OPTYPE_DO             1 offset end
const OPTYPE_FUNCTION       1 offset end
const OPTYPE_STACK_FRAME    1 offset end
const OPTYPE_RETURN         1 offset end
const OPTYPE_CALL           1 offset end
const OPTYPE_COUNT            reset  end
const sizeof(OpType) sizeof(u8) end
assert "Exhaustive handling of optype" OPTYPE_COUNT 18 = end

const TOKENTYPE_INT     1 offset end
const TOKENTYPE_STR     1 offset end
const TOKENTYPE_WORD    1 offset end
const TOKENTYPE_CSTR    1 offset end
const TOKENTYPE_CHAR    1 offset end
const TOKENTYPE_KEYWORD 1 offset end
const TOKENTYPE_COUNT     reset  end
const sizeof(TokenType) sizeof(u8) end
assert "Exhaustive handling of tokentype" TOKENTYPE_COUNT 6 = end

// consts
const DEFAULT_EXPANSION_LIMIT 1000 end
const X86_64_RET_STACK_CAPACITY 4 1024 * end
const EXPANSION_DIAGNOSTIC_LIMIT 10 end

const debug false end

// struct loc
//      String
//      int
//      int

const Loc.file  sizeof(str) offset end
const Loc.cols  sizeof(u64) offset end
const Loc.lines sizeof(u64) offset end
const sizeof(Loc)           reset  end

// class Token:
//     typ: TokenType
//     text: str
//     loc: Loc
//     value: Union[int, str, Keyword]
//     expanded_from: Optional['Token'] = None
//     expanded_count: int = 0

// struct Token
//      u8
//      String
//      Loc
//      u64
//      ptr
//      u32

const Token.type           sizeof(u8)                                       offset end
const Token.text           sizeof(str)                                      offset end
const Token.loc            sizeof(Loc)                                      offset end
const Token.value          sizeof(Keyword) sizeof(u64) sizeof(str) [+] [+]  offset end
const Token.expanded_from  sizeof(ptr)                                      offset end
const Token.expanded_count sizeof(u64)                                      offset end
const sizeof(Token)                                                         reset  end

fn memset
        alloc dst sizeof(ptr) end dst .64
        alloc n sizeof(char) end n .8
        during dup 0 != go
                1 -
                dup dst ,64 @ptr +
                n ,8
                <> .8
        end _
end

fn memcpy
        alloc dst sizeof(ptr) end dst .64
        alloc src sizeof(ptr) end src .64
        alloc len sizeof(int) end len .64
        0 during dup len ,64 < go
                dup src ,64 @ptr + ,8
                <+> dst ,64 @ptr + .8
                ++
        end _
end

fn slurp
        alloc buf sizeof(ptr) end buf .64
        alloc fd 4 end fd .32
        0 fd ,32 MAP_PRIVATE PROT_READ buf ,64 stat.size + ,64 null mmap
end

fn usage
        "USAGE : " eputs
        0 #nv cstr-to-str eputs
        " [OPTIONS] <file.thrt>\n" eputs
        "OPTIONS :\n" eputs
        "\t-r : run the program after compilation\n" eputs
        "\t-o <name> : set the executable name\n" eputs
end

define usage_ext
        usage eputs
        EXIT_FAILURE exit
end

fn main
        alloc run sizeof(bool) end
        alloc outname sizeof(char) 256 * end
        alloc customOut sizeof(bool) end
        alloc src sizeof(char) 256 * end
        alloc file sizeof(ptr) end
        alloc buf sizeof(stat) end

        false @int run .8
        256 0 outname memset
        256 0 src memset
        false @int customOut .8
        file 0 .64
        if #c 2 < go
                "[ERROR] => Not enough arguments\n" usage_ext
        end
        if #c 2 > go
                1
                during dup #c 1 - < go
                        if dup #nv "-r"C cstreq go
                                true @int run .8
                        elif dup #nv "-o"C cstreq go
                                if customOut ,8 @bool go
                                        "[ERROR] => You can't rename multiple times output\n" usage_ext
                                end
                                if dup #c 3 - > go
                                        "[ERROR] => Please provide output name for -o options\n" usage_ext
                                end
                                1 +
                                dup #nv cstr-to-str outname memcpy
                                true @int customOut .8
                        else
                                "[ERROR] => Please provide output name for -o options\n" usage_ext
                        end
                        1 +
                end _
        end
        4 dump
        #c 1 - #nv cstr-to-str src memcpy
        O_RDONLY src open
        if dup 0 < go
                "[ERROR] => Unable to open file " eputs
                256 src eputs
                "\n" eputs
                EXIT_FAILURE exit
        end
        dup buf <> fstat
        if dup 0 < go
                "[ERROR] => Unable to stat file " eputs
                256 src eputs
                "\n" eputs
                EXIT_FAILURE exit
        end
        file ,64 dump
        dup buf slurp file .64
        close
        if null file ,64 @ptr = go
                "[ERROR] => Unable to map file " eputs
                256 src eputs
                " to memory \n" eputs
                EXIT_FAILURE exit
        end
        buf stat.size + ,64 file ,64 munmap
        EXIT_SUCCESS exit
end

main

